<?php

final class DifferentialRevisionLandController extends DifferentialController {

  private $pushStrategy;

  public function handleRequest(AphrontRequest $request) {
    $viewer = $this->getViewer();
    $revision_id = $request->getURIData('id');
    $strategy_class = $request->getURIData('strategy');

    $revision = id(new DifferentialRevisionQuery())
      ->withIDs(array($revision_id))
      ->setViewer($viewer)
      ->executeOne();
    if (!$revision) {
      return new Aphront404Response();
    }

    if (is_subclass_of($strategy_class, 'DifferentialLandingStrategy')) {
      $this->pushStrategy = newv($strategy_class, array());
    } else {
      throw new Exception(
        pht(
          "Phải là lớp hợp lệ và là lớp c ".
          "%s. '%s' không phải là lớp con của l %s",
          'DifferentialLandingStrategy',
          $strategy_class,
          'DifferentialLandingStrategy'));ớp
    }

    if ($request->isDialogFormPost()) {
      $response = null;
      $text = '';
      try {
        $response = $this->attemptLand($revision, $request);
        $title = pht('Thành công rồi!');
        $text = pht('Sự thay đổi đã được thêm vào.');
      } catch (Exception $ex) {
        $title = pht('Không thành công!!!');
        if ($ex instanceof PhutilProxyException) {
          $text = hsprintf(
            '%s:<br><pre>%s</pre>',
            $ex->getMessage(),
            $ex->getPreviousException()->getMessage());
        } else {
          $text = phutil_tag('pre', array(), $ex->getMessage());
        }
        $text = id(new PHUIInfoView())
           ->appendChild($text);
      }

      if ($response instanceof AphrontDialogView) {
        $dialog = $response;
      } else {
        $dialog = id(new AphrontDialogView())
          ->setUser($viewer)
          ->setTitle($title)
          ->appendChild(phutil_tag('p', array(), $text))
          ->addCancelButton('/D'.$revision_id, pht('Done'));
      }
      return id(new AphrontDialogResponse())->setDialog($dialog);
    }

    $is_disabled = $this->pushStrategy->isActionDisabled(
      $viewer,
      $revision,
      $revision->getRepository());
    if ($is_disabled) {
      if (is_string($is_disabled)) {
        $explain = $is_disabled;
      } else {
        $explain = pht('Hành động này hiện không được kích hoạt.');
      }
      $dialog = id(new AphrontDialogView())
        ->setUser($viewer)
        ->setTitle(pht("Không thể đặt bản sửa đổi vào đây."))
        ->appendChild($explain)
        ->addCancelButton('/D'.$revision_id);

      return id(new AphrontDialogResponse())->setDialog($dialog);
    }


    $prompt = hsprintf('%s<br><br>%s',
      pht(
        'Việc này sẽ nén và rebase bản sửa đổi %s, '.
        'và được đẩy lên nhánh mặc định/master.',
        $revision_id),
      pht('Chức năng đang thử nghiệm và không hoạt động'));

    $dialog = id(new AphrontDialogView())
      ->setUser($viewer)
      ->setTitle(pht('Đặt bản sửa đổi tại đây %s?', $revision_id))
      ->appendChild($prompt)
      ->setSubmitURI($request->getRequestURI())
      ->addSubmitButton(pht('Đặt'))
      ->addCancelButton('/D'.$revision_id);

    return id(new AphrontDialogResponse())->setDialog($dialog);
  }

  private function attemptLand($revision, $request) {
    $status = $revision->getStatus();
    if ($status != ArcanistDifferentialRevisionStatus::ACCEPTED) {
      throw new Exception(pht('Chỉ những bản sửa đổi được chấp nhận mới được đặt ở đây.'));
    }

    $repository = $revision->getRepository();

    if ($repository === null) {
      throw new Exception(pht('Những bản sửa đổi không được đính kèm với repository.'));
    }

    $can_push = PhabricatorPolicyFilter::hasCapability(
      $request->getUser(),
      $repository,
      DiffusionPushCapability::CAPABILITY);

    if (!$can_push) {
      throw new Exception(
        pht('Bạn không được phép đẩy lên repository này.'));
    }

    $lock = $this->lockRepository($repository);

    try {
      $response = $this->pushStrategy->processLandRequest(
        $request,
        $revision,
        $repository);
    } catch (Exception $e) {
      $lock->unlock();
      throw $e;
    }

    $lock->unlock();

    $looksoon = new ConduitCall(
      'diffusion.looksoon',
      array(
        'repositories' => array($repository->getPHID()),
      ));
    $looksoon->setUser($request->getUser());
    $looksoon->execute();

    return $response;
  }

  private function lockRepository($repository) {
    $lock_name = __CLASS__.':'.($repository->getPHID());
    $lock = PhabricatorGlobalLock::newLock($lock_name);
    $lock->lock();
    return $lock;
  }

}
